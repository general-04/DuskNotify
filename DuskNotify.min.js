// DuskNotify9Level ver 2.2.0 last version 
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.Dusk = factory());
})(this, function () {
  'use strict';

  // SVG Icons
  const ICONS = {
  success: `
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>`,

  info: `
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" d="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z" />
    </svg>`,

  warning: `
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
    </svg>`,

  error: `
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>`,

  loading: `
    <svg xmlns="http://www.w3.org/2000/svg" class="animate-spin" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.5" />
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z" />
    </svg>`,
    
  close: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" width="18" height="18">
      <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
    </svg>`,

  ask: `
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 5.25h.008v.008H12v-.008Z" />
</svg>
`,

  shield: `
  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-shield-shaded" viewBox="0 0 16 16">
  <path fill-rule="evenodd" d="M8 14.933a1 1 0 0 0 .1-.025q.114-.034.294-.118c.24-.113.547-.29.893-.533a10.7 10.7 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.8 11.8 0 0 1-2.517 2.453 7 7 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7 7 0 0 1-1.048-.625 11.8 11.8 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 63 63 0 0 1 5.072.56"/>
</svg>
    `,

  clock: `
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>`,

  bell: `
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M14.857 17.082a23.848 23.848 0 0 0 5.454-1.31A8.967 8.967 0 0 1 18 9.75V9A6 6 0 0 0 6 9v.75a8.967 8.967 0 0 1-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 0 1-5.714 0m5.714 0a3 3 0 1 1-5.714 0" />
</svg>
    `,

  search: `
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="m15.75 15.75-2.489-2.489m0 0a3.375 3.375 0 1 0-4.773-4.773 3.375 3.375 0 0 0 4.774 4.774ZM21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>

    `,
    setting: `
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M11.42 15.17 17.25 21A2.652 2.652 0 0 0 21 17.25l-5.877-5.877M11.42 15.17l2.496-3.03c.317-.384.74-.626 1.208-.766M11.42 15.17l-4.655 5.653a2.548 2.548 0 1 1-3.586-3.586l6.837-5.63m5.108-.233c.55-.164 1.163-.188 1.743-.14a4.5 4.5 0 0 0 4.486-6.336l-3.276 3.277a3.004 3.004 0 0 1-2.25-2.25l3.276-3.276a4.5 4.5 0 0 0-6.336 4.486c.091 1.076-.071 2.264-.904 2.95l-.102.085m-1.745 1.437L5.909 7.5H4.5L2.25 3.75l1.5-1.5L7.5 4.5v1.409l4.26 4.26m-1.745 1.437 1.745-1.437m6.615 8.206L15.75 15.75M4.867 19.125h.008v.008h-.008v-.008Z" />
</svg>

    `,
    ban: `
    <svg class="w-[47px] h-[47px] dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="m6 6 12 12m3-6a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
</svg>

    `
};

  // Default options
  const DEFAULT_OPTIONS = {
    title: '', 
    text: '',
    icon: 'info', // 'success', 'info', 'warning', 'error', 'loading', 'ask', 'shield', 'clock', 'bell', 'search','setting', 'ban'
    iconVisible: true,
    image: '',
    alertColorContent: '',
    showButtonColumn: null,
    showButtonGrow: true,
    showConfirmButton: true,
    showCancelButton: false,
    confirmButtonText: 'OK',
    cancelButtonText: 'Cancel',
    confirmCallback: null,
    cancelCallback: null,
    closeOnOverlayClick: true,
    progress: true,
    timer: null, // ms
    position: 'center', // 'center', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end'
    animation: true,
    animationCustomStart: '',
    animationCustomEnd: '',
    customClass: '',
    allowOutsideClick: true,
    backdrop: true,
    toast: false,
    toastPosition: 'bottom-end'
  };
const ANIMATION_EFFECTS = [
  'fade-in', 'fade-out',
  'slide-up', 'slide-down',
  'zoom-in', 'zoom-out',
  'bounce-in', 'bounce-out',
  'flip-in', 'flip-out',
  'rotate-in', 'rotate-out'
];
  
  function getColorValue(color) {
  const colorMap = {
    success: 'var(--da-success-color)',
    info: 'var(--da-info-color)',
    warning: 'var(--da-warning-color)',
    error: 'var(--da-error-color)',
    ban: 'var(--da-ban-color)',
    
    // special
    loading: 'var(--da-loading-color)',
    ask: 'var(--da-ask-color)',
    shield: 'var(--da-shield-color)',
    clock: 'var(--da-clock-color)',
    bell: 'var(--da-bell-color)',
    search: 'var(--da-search-color)',
    setting: 'var(--da-setting-color)',
    
    // (optional)
    emerald: 'var(--da-success-color)',
    blue: 'var(--da-info-color)',
    amber: 'var(--da-warning-color)',
    red: 'var(--da-error-color)',
    sky: 'var(--da-loading-color)',
    violet: 'var(--da-ask-color)',
    orange: 'var(--da-shield-color)',
    cyan: 'var(--da-clock-color)',
    pink: 'var(--da-bell-color)',
    lime: 'var(--da-search-color)',
    slate: 'var(--da-setting-color)'
  };
  
  if (colorMap[color]) {
    return colorMap[color];
  }
  
  if (/^#([0-9A-F]{3}){1,2}$/i.test(color)) {
    return color;
  }
  
  return 'var(--da-info-color)';
}

  function createElement(tag, classes = [], attributes = {}) {
    const element = document.createElement(tag);

    if (classes.length) {
      element.classList.add(...classes);
    }

    Object.entries(attributes).forEach(([key, value]) => {
      element.setAttribute(key, value);
    });

    return element;
  }

  // Main Dusk class
  class Dusk {
    constructor(options = {}) {
      this.options = { ...DEFAULT_OPTIONS, ...options };
      this.overlayElement = null;
      this.alertElement = null;
      this.timer = null;
      this.toastElement = null;

      if (!this.options.toast) {
        this.init();
      }
    }

    init() {

      this.overlayElement = createElement('div', ['dark-alert-overlay']);

      if (!this.options.backdrop) {
        this.overlayElement.style.background = 'transparent';
      }

      this.alertElement = createElement('div', ['dark-alert', `dark-alert-${this.options.icon}`]);
      
      if (this.options.animationCustomStart && ANIMATION_EFFECTS.includes(this.options.animationCustomStart)) {
    this.alertElement.classList.add(`da-animate-${this.options.animationCustomStart}`);
  } else if (this.options.animation) {
    this.alertElement.classList.add('da-animate-fade-in');
  }

      if (this.options.customClass) {
        this.alertElement.classList.add(this.options.customClass);
      }
      
      // Build alert content
      this.buildAlertContent();
      
      this.applyAlertColors();

      // Append to overlay
      this.overlayElement.appendChild(this.alertElement);

      // Add to DOM
      document.body.appendChild(this.overlayElement);

      // Activate
      setTimeout(() => {
        this.overlayElement.classList.add('active');
      }, 10);

      // Setup event listeners
      this.setupEventListeners();

      // Handle timer if set
      this.handleTimer();

      // Prevent body scrolling
      document.body.style.overflow = 'hidden';

      return this;
    }

applyButtonGrow(container) {
  const allButtons = container.querySelectorAll('.dark-alert-button');

  allButtons.forEach(btn => {
    if (this.options.showButtonGrow === false) {
      btn.style.flex = 'unset';
    } else {
      btn.style.flex = '1';
    }
  });
}

buildButtonContainer() {
  const buttonsContainer = createElement('div', ['dark-alert-buttons']);

  if (this.options.showButtonColumn === true) {
    buttonsContainer.classList.add('dark-alert-buttons-column');
  } else {
    buttonsContainer.classList.add('dark-alert-buttons-row');
  }

  if (this.options.showCancelButton) {
    const cancelButton = createElement('button', ['dark-alert-button', 'dark-alert-button-cancel']);
    cancelButton.textContent = this.options.cancelButtonText;
    cancelButton.addEventListener('click', () => {
      this.close();
      if (typeof this.options.cancelCallback === 'function') {
        this.options.cancelCallback();
      }
    });
    buttonsContainer.appendChild(cancelButton);
  }

  if (this.options.showConfirmButton) {
    const confirmButton = createElement('button', ['dark-alert-button', 'dark-alert-button-confirm']);
    confirmButton.textContent = this.options.confirmButtonText;
    confirmButton.addEventListener('click', () => {
      this.close();
      if (typeof this.options.confirmCallback === 'function') {
        this.options.confirmCallback();
      }
    });
    buttonsContainer.appendChild(confirmButton);
  }

  this.applyButtonGrow(buttonsContainer);

  this.alertElement.appendChild(buttonsContainer);
}


applyAlertColors() {
  if (this.options.alertColorContent) {
    const colorValue = getColorValue(this.options.alertColorContent);
    
    this.alertElement.style.setProperty('--da-custom-color', colorValue);
    this.alertElement.classList.add('dark-alert-custom-color');

    let rgbColor;
    if (colorValue.startsWith('#')) {
      const {r, g, b} = this.hexToRgb(colorValue);
      rgbColor = `${r}, ${g}, ${b}`;
    } else {
      const cssValue = getComputedStyle(document.documentElement)
        .getPropertyValue(colorValue.replace('var(', '').replace(')', ''));
      const {r, g, b} = this.hexToRgb(cssValue.trim());
      rgbColor = `${r}, ${g}, ${b}`;
    }
    
    this.alertElement.style.setProperty('--da-custom-pulse-color', rgbColor);
    this.alertElement.style.setProperty('--da-custom-accent-color', colorValue);

    const elementsToColor = [
      '.dark-alert-progress-bar',
      '.dark-alert-toast-progress::before',
      '.dark-alert-icon',
      '.dark-alert-button-confirm'
    ];
    
    elementsToColor.forEach(selector => {
      const elements = this.alertElement.querySelectorAll(selector);
      elements.forEach(el => {
        if (selector.includes('progress')) {
          el.style.backgroundColor = colorValue;
        } else if (selector.includes('icon')) {
          el.style.color = colorValue;
        } else if (selector.includes('button')) {
          el.style.backgroundColor = colorValue;
        }
      });
    });
  }
}

hexToRgb(hex) {
  hex = hex.replace('#', '');
  const r = parseInt(hex.substring(0, 2), 16);
  const g = parseInt(hex.substring(2, 4), 16);
  const b = parseInt(hex.substring(4, 6), 16);
  return { r, g, b };
}

    buildAlertContent() {
        
      if (this.options.icon && this.options.iconVisible && !this.options.image) {
      const iconContainer = createElement('div', ['dark-alert-icon']);
      iconContainer.innerHTML = ICONS[this.options.icon];
      this.alertElement.appendChild(iconContainer);
      }

      // Image
      if (this.options.image) {   
        const imageContainer = createElement('div', ['dark-alert-image']);
        const img = createElement('img', [], {
          src: this.options.image,
          alt: this.options.title || 'Alert image'
        });
        imageContainer.appendChild(img);
        this.alertElement.appendChild(imageContainer);
      }

      // Title
      if (this.options.title) {
        const title = createElement('h3', ['dark-alert-title']);
        title.textContent = this.options.title;
        this.alertElement.appendChild(title);
      }

      // Content
      if (this.options.text) {
        const content = createElement('div', ['dark-alert-content']);
        content.textContent = this.options.text;
        this.alertElement.appendChild(content);
      }

    this.buildButtonContainer();
	
  // Progress Bar
  if (this.options.timer && this.options.progress) {
    const progressContainer = createElement('div', ['dark-alert-progress']);
    const progressBar = createElement('div', ['dark-alert-progress-bar']);
    
    progressBar.style.animationDuration = `${this.options.timer}ms`;
    progressContainer.appendChild(progressBar);
    this.alertElement.appendChild(progressContainer);
  }

    }

    setupEventListeners() {
      // Close on overlay click if enabled
      if (this.options.closeOnOverlayClick && this.options.allowOutsideClick) {
        this.overlayElement.addEventListener('click', (e) => {
          if (e.target === this.overlayElement) {
            this.close();
          }
        });
      }

      // Close on ESC key
      document.addEventListener('keydown', this.escKeyHandler = (e) => {
        if (e.key === 'Escape' && this.options.allowOutsideClick) {
          this.close();
        }
      });
    }

    handleTimer() {
      if (this.options.timer && typeof this.options.timer === 'number') {
        this.timer = setTimeout(() => {
          this.close();
        }, this.options.timer);
      }
    }
close() {
  if (this.overlayElement) {
    this.overlayElement.classList.remove('active');
    
    if (this.timer) {
      clearTimeout(this.timer);
    }
    
    if (this.options.animationCustomEnd && ANIMATION_EFFECTS.includes(this.options.animationCustomEnd)) {
      this.alertElement.classList.add(`da-animate-${this.options.animationCustomEnd}`);
    } else if (this.options.animation) {
      this.alertElement.classList.add('da-animate-fade-out');
    }
    
    const duration = this.getAnimationDuration(this.options.animationCustomEnd || 'fade-out');
    
    setTimeout(() => {
      if (this.overlayElement.parentNode) {
        document.body.removeChild(this.overlayElement);
      }
      
      if (!document.querySelector('.dark-alert-overlay')) {
        document.body.style.overflow = '';
      }
      
      document.removeEventListener('keydown', this.escKeyHandler);
    }, duration);
  }
}

getAnimationDuration(effect) {
  const effectDurations = {
    'bounce-in': 500,
    'bounce-out': 500,
    'flip-in': 600,
    'flip-out': 600,
    'rotate-in': 700,
    'rotate-out': 700,
    default: 300
  };
  
  return effectDurations[effect] || effectDurations.default;
}

    // Toast methods
    static showToast(options) {
      const toastOptions = {
        ...options,
        toast: true,
        showConfirmButton: false,
        showCancelButton: false,
        timer: options.timer || 3000
      };

      const toast = new Dusk(toastOptions);
      return toast.createToast();
    }                                                         
    createToast() {
      // Create toast element
      this.toastElement = createElement('div', ['dark-alert-toast', `dark-alert-toast-${this.options.icon}`]);

      // Add custom class :)
      if (this.options.customClass) {
        this.toastElement.classList.add(this.options.customClass);
      }

      // Icon
      const iconContainer = createElement('div', ['dark-alert-toast-icon']);
      iconContainer.innerHTML = ICONS[this.options.icon];
      this.toastElement.appendChild(iconContainer);

      // Content container
      const contentContainer = createElement('div', ['dark-alert-toast-content']);

      // Title
      if (this.options.title) {
        const title = createElement('div', ['dark-alert-toast-title']);
        title.textContent = this.options.title;
        contentContainer.appendChild(title);
      }

      // Message
      if (this.options.text) {
        const message = createElement('div', ['dark-alert-toast-message']);
        message.textContent = this.options.text;
        contentContainer.appendChild(message);
      }

      this.toastElement.appendChild(contentContainer);

      // Close button
      const closeButton = createElement('div', ['dark-alert-toast-close']);
      closeButton.innerHTML = ICONS.close;
      closeButton.addEventListener('click', () => this.closeToast());
      this.toastElement.appendChild(closeButton);

      // Progress bar 
      if (this.options.timer) {
        const progressBar = createElement('div', ['dark-alert-toast-progress']);
        this.toastElement.appendChild(progressBar);

        // Animate the progress bar
        setTimeout(() => {
          const innerBar = progressBar.querySelector('::before') || progressBar;
          innerBar.style.animation = `shrink ${this.options.timer / 1000}s linear forwards`;
        }, 10);
      }

      // Set position
      this.handleToastPosition();

      // Add to DOM
      document.body.appendChild(this.toastElement);

      // Activate
      setTimeout(() => {
        this.toastElement.classList.add('active');
      }, 10);

      // Handle timer
      if (this.options.timer) {
        this.timer = setTimeout(() => {
          this.closeToast();
        }, this.options.timer);
      }

      return this;
    }

    handleToastPosition() {
      const position = this.options.toastPosition || 'bottom-end';

      // Calculate position
      switch (position) {
        case 'top':
          this.toastElement.style.top = '24px';
          this.toastElement.style.left = '50%';
          this.toastElement.style.right = 'auto';
          this.toastElement.style.bottom = 'auto';
          this.toastElement.style.transform = 'translateX(-50%)';
          break;
        case 'top-start':
          this.toastElement.style.top = '24px';
          this.toastElement.style.left = '24px';
          this.toastElement.style.right = 'auto';
          this.toastElement.style.bottom = 'auto';
          break;
        case 'top-end':
          this.toastElement.style.top = '24px';
          this.toastElement.style.right = '24px';
          this.toastElement.style.left = 'auto';
          this.toastElement.style.bottom =
